# include ../makes/defines.inc

OUTDIR_R=$(OUTDIR)/sample_objs_r
OUTDIR_D=$(OUTDIR)/sample_objs_d

CPP_SOURCES=$(wildcard *.cpp)
CPP_HEADERS=$(wildcard *.h)
OBJS_R=$(patsubst %.cpp,$(OUTDIR_R)/%.o,$(CPP_SOURCES))
OBJS_D=$(patsubst %.cpp,$(OUTDIR_D)/%.o,$(CPP_SOURCES))

TIDY_TARGETS=$(patsubst %.cpp,.tidy_%,$(CPP_SOURCES))

COMMON_CFLAGS += -std=c++17 -Wunused-parameter -DPROJECT_DIR=$(ROOT_DIR)
CFLAGS_R=$(COMMON_CFLAGS) -O3
CFLAGS_D=$(COMMON_CFLAGS) -g

COMMON_LFLAGS +=-L$(OUTDIR)
ifeq ($(CUDA_AVAILABLE),1)
	COMMON_LFLAGS += -L/usr/local/cuda-10.0/lib64
endif
LFLAGS_R=$(COMMON_LFLAGS) -ldll
LFLAGS_D=$(COMMON_LFLAGS) -ldll_debug
ifeq ($(CUDA_AVAILABLE),1)
	LFLAGS_R += -lcuda -lcudart -lcurand
	LFLAGS_D += -lcuda -lcudart -lcurand
endif

all: release debug

release: $(PROGRAM_R)
debug: $(PROGRAM_D)

#### LINKING

$(PROGRAM_R): $(OBJS_R)
	@echo "Linking: $@"
	@$(CC) $^ -o $@ $(LFLAGS_R)

$(PROGRAM_D): $(OBJS_D)
	@echo "Linking: $@"
	@$(CC) $^ -o $@ $(LFLAGS_D)

#### COMPILING

$(OUTDIR_R)/%.o: %.cpp $(CPP_HEADERS) | $(OUTDIR_R)
	@echo "Compiling release: $<"
	@$(CC) -c -o $@ $(CFLAGS_R) $<

$(OUTDIR_D)/%.o: %.cpp $(CPP_HEADERS) | $(OUTDIR_D)
	@echo "Compiling debug: $<"
	@$(CC) -c -o $@ $(CFLAGS_D) $<

#### DIRECTORIES

$(OUTDIR_R):
	@mkdir -p $@

$(OUTDIR_D):
	@mkdir -p $@

#### clang-format
format:
	$(CLANG_FORMAT) $(CLANG_FORMAT_ARGS) $(CPP_SOURCES) $(CPP_HEADERS)

#### clang-tidy
tidy: $(TIDY_TARGETS)

.tidy_%: %.cpp $(CPP_HEADERS)
	$(CLANG_TIDY_EXEC) --fix $< -quiet -- $(CLANG_TIDY_INCLUDES) $(CLANG_TIDY_ARGS)
	@touch $@
